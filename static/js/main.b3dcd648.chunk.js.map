{"version":3,"sources":["api/urlApi.js","components/urlGenerate.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","useStyles","makeStyles","theme","snack","width","marginTop","spacing","snackBarColor","backgroundColor","bar","position","height","margin","background","circle","top","marginLeft","left","borderRadius","webkitAnimation","p","right","textTransform","color","fontFamily","fontWeight","Alert","props","elevation","variant","UrlGenerator","useState","link","setLink","shortUrl","setShortUrl","long","setLong","loading","setLoading","React","openSnack","setOpenSnack","regex","classes","buttonStatus","setButtonStatus","searchText","setSearchText","handleCloseSnack","event","reason","handleSubmit","e","preventDefault","getData","a","urlApi","get","then","response","console","log","data","result","short_link","original_link","catch","err","document","getElementById","innerText","copyText","navigator","clipboard","writeText","style","display","alignItems","onSubmit","TextField","label","value","onChange","target","test","length","marginRight","Button","disabled","onClick","CircularProgress","className","flexDirection","marginBottom","rel","href","id","textDecoration","alignSelf","cursor","Snackbar","open","autoHideDuration","onClose","severity","App","Grid","container","direction","justifyContent","Boolean","window","location","hostname","match","ReactDOM","render","serviceWorker","ready","registration","unregister"],"mappings":"qTAEeA,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAQ,6B,mCCKJC,EAAYC,aAAW,SAACC,GAAD,MAAY,CAEvCC,MAAO,CACLC,MAAO,OACP,YAAa,CACXC,UAAWH,EAAMI,QAAQ,KAG7BC,cAAc,CACZC,gBAAgB,OAElBC,IAAK,CACHC,SAAU,WACVC,OAAQ,MACRP,MAAO,QACPQ,OAAQ,SACRC,WAAY,OACZR,UAAW,SAEbS,OAAQ,CACNJ,SAAU,WACVK,IAAK,QACLC,WAAY,QACZL,OAAQ,OACRP,MAAO,OACPa,KAAM,IACNJ,WAAY,OACZK,aAAc,MACdC,gBAAiB,oBAEnBC,EAAG,CACDV,SAAU,WACVK,IAAK,QACLM,MAAO,QACPC,cAAe,YACfC,MAAO,UACPC,WAAY,wBACZC,WAAY,YAOhB,SAASC,EAAMC,GACb,OAAO,kBAAC,IAAD,eAAUC,UAAW,EAAGC,QAAQ,UAAaF,IAGtD,IAiJeG,EAjJM,WACnB,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA+BF,mBAAS,IAAxC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAuBJ,mBAAS,IAAhC,mBAAOK,EAAP,KAAYC,EAAZ,KACA,EAA6BN,oBAAS,GAAtC,mBAAOO,EAAP,KAAeC,EAAf,KACA,EAAkCC,IAAMT,UAAS,GAAjD,mBAAOU,EAAP,KAAkBC,EAAlB,KACA,EAA2BX,mBAAS,IAApC,mBACMY,GADN,UACe,iCACTC,EAAU5C,IAChB,EAAwC+B,oBAAS,GAAjD,mBAAOc,EAAP,KAAqBC,EAArB,KACA,EAAoCN,IAAMT,SAAS,YAAnD,mBAAOgB,EAAP,KAAmBC,EAAnB,KAeIC,EAAmB,SAACC,EAAOC,GAChB,cAAXA,GAIJT,GAAa,IAGTU,EAAe,SAACC,GACtBlB,EAAY,IACZkB,EAAEC,iBACFC,IACAhB,GAAYD,GACZL,EAAQ,KAGFsB,EAAO,uCAAG,sBAAAC,EAAA,sEAEVC,EACLC,IADK,sBACc1B,IACnB2B,MAAK,SAACC,GACLC,QAAQC,IAAIF,GACdzB,EAAYyB,EAASG,KAAKC,OAAOC,YACjC5B,EAAQuB,EAASG,KAAKC,OAAOE,eAC7B3B,GAAW,MAEV4B,OAAM,SAACC,GACNP,QAAQC,IAAIM,MAXE,2CAAH,qDAzCc,4CAuD3B,WAAoBlB,GAApB,eAAAM,EAAA,sEAEuBa,SAASC,eAAe,UAAUC,UAFzD,OAEMC,EAFN,OAGMC,UAAUC,WACbD,UAAUC,UAAUC,UAAUH,GAAUb,MAAK,WAC3CjB,GAAa,MACb,SAAC0B,GACDP,QAAQC,IAAI,sBAAuBM,MAPxC,4CAvD2B,sBAqEzB,OACE,oCACA,0BAAMQ,MAAO,CAACC,QAAQ,OAAQC,WAAW,UAAWC,SAAU,SAAC1B,GAAD,OAAMD,EAAaC,KAC/E,kBAAC2B,EAAA,EAAD,CACAC,MAAM,YACNpD,QAAQ,WACRqD,MAAOlD,EACPmD,SAhEc,SAAC9B,GACrBpB,EAAQoB,EAAE+B,OAAOF,OACbvC,EAAM0C,KAAKhC,EAAE+B,OAAOF,QAAoC,IAA1B7B,EAAE+B,OAAOF,MAAMI,OAGxC3C,EAAM0C,KAAKhC,EAAE+B,OAAOF,OAC3BpC,GAAgB,IAEhBE,EAAc,YACdF,GAAgB,KANhBE,EAAc,0BAAM4B,MAAO,CAACrD,MAAM,UAApB,2BACduB,GAAgB,KA6DZvB,MAAM,YACNqD,MAAO,CAACW,YAAY,WAElBjD,GACA,kBAACkD,EAAA,EAAD,CAASC,SAAY5C,EAAchB,QAAQ,YAAYN,MAAM,YAAYmE,QAAS,SAACrC,GAAD,OAAOD,EAAaC,IAAIuB,MAAO,CAACjE,OAAO,SAAUoC,GAGpIT,GAAW,kBAACqD,EAAA,EAAD,CAAkBpE,MAAM,eAIrCe,GAIL,yBAAKsD,UAAU,OACb,yBAAKA,UAAU,WACf,uBAAGA,UAAU,OAAb,mBAMG1D,GACC,yBAAK0C,MAAO,CAACC,QAAQ,OAAQgB,cAAc,SAAUxF,UAAU,SAC/D,yBAAKuE,MAAO,CAACkB,aAAa,OAAQjB,QAAQ,SAA1C,eAEA,0BAAMD,MAAO,CAAC5D,WAAW,OAAOS,WAAW,SAC3C,uBACGsE,IAAI,sBACJC,KAAM9D,EACNkD,OAAO,SACPa,GAAG,SACHrB,MAAO,CACLrD,MAAM,UACN2E,eAAe,SAIPhE,IAKR,0BAAM0C,MAAO,CAACC,QAAQ,OAAQsB,UAAU,QAAQ,kBAAC,IAAD,CAC3CvB,MAAO,CAAC5D,WAAW,OAAOO,MAAM,QAAQ6E,OAAO,WAC/CV,QA3HW,gDA8HrB,+CACoB,0BAAMd,MAAO,CAAC5D,WAAW,OAAOO,MAAM,UAAU6E,OAAO,UAAU3E,WAAW,SAAUW,KAM5G,yBAAKwD,UAAWhD,EAAQzC,OAEvB,kBAACkG,EAAA,EAAD,CAAUC,KAAM7D,EAAW8D,iBAAkB,IAAMC,QAASvD,GAC1D,kBAAC,EAAD,CAAOuD,QAASvD,EAAkBwD,SAAS,WAA3C,mBCnLQC,MATf,WACE,OACE,kBAACC,EAAA,EAAD,CAAMf,UAAU,MAAMgB,WAAS,EAACC,UAAU,SAASC,eAAe,SAAShC,WAAW,UACrF,6CACA,kBAAC,EAAD,QCIeiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAShD,SAASC,eAAe,SD6H3C,kBAAmBG,WACrBA,UAAU6C,cAAcC,MAAM5D,MAAK,SAAA6D,GACjCA,EAAaC,kB","file":"static/js/main.b3dcd648.chunk.js","sourcesContent":["import axios from 'axios'\n\nexport default axios.create({\n  baseURL:'https://api.shrtco.de/v2'\n})","import React, {useState} from 'react'\nimport {TextField,Button,CircularProgress } from '@material-ui/core'\nimport urlApi from '../api/urlApi'\nimport {RiFileCopyLine} from \"react-icons/ri\";\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n\n  snack: {\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(2),\n    },\n  },\n  snackBarColor:{\n    backgroundColor:'red'\n  },\n  bar: {\n    position: 'relative',\n    height: '2px',\n    width: '500px',\n    margin: '0 auto',\n    background: '#fff',\n    marginTop: '150px',\n  },\n  circle: {\n    position: 'absolute',\n    top: '-30px',\n    marginLeft: '-30px',\n    height: '60px',\n    width: '60px',\n    left: '0',\n    background: '#fff',\n    borderRadius: '30%',\n    webkitAnimation: 'move 5s infinite'\n  },\n  p: {\n    position: 'absolute',\n    top: '-35px',\n    right: '-85px',\n    textTransform: 'uppercase',\n    color: '#347fc3',\n    fontFamily: 'helvetica, sans-serif',\n    fontWeight: 'bold'\n  }\n  \n      \n}));\n\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst UrlGenerator = () => {\n  const [link, setLink] = useState('')\n  const [shortUrl,setShortUrl] = useState('')\n  const [long,setLong] = useState('')\n  const [loading,setLoading] = useState(false)\n  const [openSnack, setOpenSnack] = React.useState(false);\n  const [status,setStatus] = useState('')\n  const regex =  /^(ftp|http|https):\\/\\/[^ \"]+$/;\n  const classes = useStyles();\n  const [buttonStatus, setButtonStatus] = useState(true);\n  const [searchText, setSearchText] = React.useState(\"Generate\");\n \nconst handleInput = (e) => {\nsetLink(e.target.value)\nif(!regex.test(e.target.value) && e.target.value.length !== 0){\n  setSearchText(<span style={{color:'black'}}>Please enter valid URL</span>)\n  setButtonStatus(true)\n}else if(regex.test(e.target.value)){\n  setButtonStatus(false)\n}else{\n  setSearchText('Generate')\n  setButtonStatus(true)\n}\n}\n\nconst handleCloseSnack = (event, reason) => {\n  if (reason === 'clickaway') {\n    return;\n  }\n\n  setOpenSnack(false);\n};\n\nconst handleSubmit = (e)  => {\nsetShortUrl('')\ne.preventDefault();\ngetData();\nsetLoading(!loading)\nsetLink('')\n}\n\nconst getData = async () => {\n\nawait urlApi\n.get(`shorten?url=${link}`)\n.then((response) => {\n  console.log(response)\nsetShortUrl(response.data.result.short_link)\nsetLong(response.data.result.original_link)\nsetLoading(false)\n})\n.catch((err) => {\n  console.log(err)\n})\n}\nasync function copy(event){\n\n  let copyText = await document.getElementById(\"myText\").innerText;\n   if(navigator.clipboard){\n   navigator.clipboard.writeText(copyText).then(()=>{\n     setOpenSnack(true);\n   },(err)=>{\n     console.log('failed to copy text', err)\n   })\n }\n\n \n }\n\n  return(\n    <>\n    <form style={{display:'flex', alignItems:'center'}} onSubmit={(e)=> handleSubmit(e)}>\n      <TextField\n      label='your link'\n      variant='outlined'\n      value={link}\n      onChange={handleInput}\n      color='secondary'\n      style={{marginRight:'10px'}}\n      />\n      {!loading && (\n        <Button  disabled = {buttonStatus} variant='contained' color='secondary' onClick={(e) => handleSubmit(e)} style={{height:'55px'}}>{searchText}</Button>\n      )}\n\n      {loading && <CircularProgress color=\"secondary\"/>}\n      \n    </form>\n\n    {loading && \n\n\n\n<div className=\"bar\">\n  <div className=\"circle\"></div>\n  <p className='pdd'>Please Wait...</p>\n</div>\n\n\n\n}\n    {shortUrl && (\n      <div style={{display:'flex', flexDirection:'column', marginTop:'50px'}}>\n      <div style={{marginBottom:'10px', display:'flex'}}>\n      Short Link :  \n      <span style={{marginLeft:'10px',fontWeight:'bold'}}>\n      <a\n         rel=\"noopener noreferrer\"\n         href={shortUrl}\n         target='_blank'\n         id='myText'\n         style={{\n           color:'#E9D758',\n           textDecoration:'none'\n                }}\n        >\n                  \n                  {shortUrl}\n        </a>\n\n      </span>\n                \n           <span style={{display:'flex', alignSelf:'end'}}><RiFileCopyLine \n                style={{marginLeft:'10px',color:'black',cursor:'pointer'}} \n                onClick={copy}/>\n            </span>\n      </div>\n      <div>\n           Original Url : <span style={{marginLeft:'10px',color:'#E9D758',cursor:'pointer',fontWeight:'bold'}}>{long}</span>\n      </div>\n      </div>\n    )\n\n    }\n    <div className={classes.snack}>\n     \n     <Snackbar open={openSnack} autoHideDuration={4000} onClose={handleCloseSnack} >\n       <Alert onClose={handleCloseSnack} severity=\"success\">\n         URL Copied!\n       </Alert>\n     </Snackbar>\n    </div>\n    </>\n  )\n}\n\nexport default UrlGenerator","import React from 'react';\nimport {Grid} from '@material-ui/core'\nimport './App.css';\nimport UrlGenerator from './components/urlGenerate'\nfunction App() {\n  return (\n    <Grid className=\"App\" container direction='column' justifyContent='center' alignItems='center' >\n     <h1>URL shortener</h1>\n     <UrlGenerator/>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}